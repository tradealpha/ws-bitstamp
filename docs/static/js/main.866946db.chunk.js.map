{"version":3,"sources":["visualization/chart.tsx","visualization/utils.tsx","visualization/table.tsx","visualization/bitstamp.tsx","visualization/index.tsx","serviceWorker.ts","index.tsx"],"names":["lineChartOptions","maintainAspectRatio","tooltips","enabled","scales","xAxes","ticks","autoSkip","maxTicksLimit","props","data","labels","chartLabel","d","datasets","label","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","lineData","options","colors","channels","map","x","initUnit","value","growth","colorIdx","values","init","Array","fill","row","length","Table","Util","c","key","i","cell","j","style","transition","Utils","number","formatNumber","ws","WebSocket","onopen","forEach","channel","send","JSON","stringify","event","Badge","text","isPrimary","className","onClick","Badges","channelSelected","v","useState","setData","selectedChannel","setChannel","onmessage","a","parse","price","indexOf","Math","sign","_","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.866946db.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Line } from \"react-chartjs-2\";\n\nconst lineData = (\n  chartLabel: string,\n  data: number[],\n  labels: string[] = []\n): { labels?: string[]; datasets: any } => ({\n  labels,\n  datasets: [\n    {\n      label: chartLabel,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(75,192,192,0.4)\",\n      borderColor: \"rgba(75,192,192,1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(75,192,192,1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data,\n    },\n  ],\n});\n\nconst lineChartOptions = {\n  //responsive: true,\n  maintainAspectRatio: false,\n  tooltips: {\n    enabled: true,\n  },\n  scales: {\n    xAxes: [\n      {\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 10,\n        },\n      },\n    ],\n  },\n};\n\nexport default (props: {\n  chartLabel?: string;\n  data: number[];\n  labels: string[];\n}) => {\n  const { data, labels, chartLabel = \"\" } = props;\n  const d = lineData(chartLabel, data, labels);\n  return <Line data={d} options={lineChartOptions} />;\n};\n","import * as T from \"./type\";\n\nexport const colors = [\n  \"#838B8B\",\n  \"#7A8B8B\",\n  \"#C1CDCD\",\n  \"#668B8B\",\n  \"#B4CDCD\",\n  \"#2F4F4F\",\n  \"#2F4F4F\",\n  \"#5F9F9F\",\n  \"#C0D9D9\",\n  \"#528B8B\",\n  \"#E0EEEE\",\n  \"#96CDCD\",\n  \"#388E8E\",\n  \"#79CDCD\",\n  \"#D1EEEE\",\n  \"#8FD8D8\",\n  \"#66CCCC\",\n  \"#ADEAEA\",\n];\n\nexport const channels: string[] = [\n  \"btcusd\",\n  \"xrpusd\",\n  \"ltcusd\",\n  \"ethusd\",\n  \"bchusd\",\n].map((x) => \"live_trades_\" + x);\n\nconst initUnit = {\n  value: 0,\n  growth: 0,\n  colorIdx: 0,\n  values: [],\n};\n\nexport const init: T.V[][] = new Array(1)\n  .fill(0)\n  .map((row) => new Array(channels.length).fill(initUnit));\n","import React from \"react\";\n\nimport Utils from \"@nexys/utils\";\nimport * as T from \"./type\";\nimport * as Util from \"./utils\";\n\nconst Table = (props: { data: T.V[][] }) => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {Util.channels.map((c) => (\n            <th key={c}>{c}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {props.data.map((row, i) => (\n          <tr key={i}>\n            {row.map((cell, j) => (\n              <td\n                key={j}\n                style={{\n                  backgroundColor: Util.colors[cell.colorIdx],\n                  transition: \"background-color .4s\",\n                }}\n              >\n                {cell.value} ({Utils.number.formatNumber(cell.growth)})\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { useState } from \"react\";\n\nimport Chart from \"./chart\";\nimport Table from \"./table\";\nimport * as Util from \"./utils\";\nconst host = \"wss://ws.bitstamp.net\";\n\nconst ws: WebSocket = new WebSocket(host);\n\nws.onopen = () => {\n  Util.channels.forEach((channel) => {\n    ws.send(\n      JSON.stringify({\n        event: \"bts:subscribe\",\n        data: {\n          channel,\n        },\n      })\n    );\n  });\n};\n\nconst Badge = (props: {\n  text: string;\n  isPrimary?: boolean;\n  onClick: (channel: string) => void;\n}) => {\n  const { text, isPrimary = false } = props;\n  const color = isPrimary ? \"primary\" : \"secondary\";\n  const className = \"badge badge-pill badge-\" + color;\n  return (\n    <span onClick={() => props.onClick(text)} className={className}>\n      {text}\n    </span>\n  );\n};\n\nconst Badges = (props: {\n  channelSelected?: string;\n  onClick: (channel: string) => void;\n}) => {\n  const { channelSelected = \"live_trades_btcusd\" } = props;\n\n  return (\n    <>\n      {Util.channels.map((channel, i) => {\n        return (\n          <Badge\n            key={i}\n            onClick={(v) => props.onClick(v)}\n            text={channel}\n            isPrimary={channelSelected === channel}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default () => {\n  const [d, setData] = useState(Util.init);\n  const [selectedChannel, setChannel] = useState<string>(\"live_trades_btcusd\");\n\n  ws.onmessage = (event) => {\n    const a: { data: { price: number }; channel: string } = JSON.parse(\n      event.data\n    );\n\n    if (a.data && a.data.price) {\n      const i: number = Util.channels.indexOf(a.channel);\n      const v = d[0][i];\n      const value = a.data.price;\n      const growth = (100 * (value - v.value)) / v.value;\n      const colorIdx = Math.sign(growth) + 1;\n      const values: number[] = [...d[0][i].values, value];\n\n      d[0][i] = { value, growth, colorIdx, values };\n      setData([...d]);\n    }\n  };\n\n  const i: number = Util.channels.indexOf(selectedChannel);\n\n  return (\n    <>\n      <h3>Table</h3>\n      <Table data={d} />\n      <h3>Chart</h3>\n      <Badges\n        onClick={(c) => setChannel(c)}\n        channelSelected={selectedChannel}\n      />\n      <Chart\n        chartLabel={selectedChannel}\n        data={d[0][i].values}\n        labels={d[0][i].values.map((_, i) => \"\" + i)}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport Bitstamp from \"./bitstamp\";\n\nexport default () => {\n  return (\n    <div className=\"container\">\n      <Bitstamp />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from \"./App\";\nimport Visualization from \"./visualization\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Visualization />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}