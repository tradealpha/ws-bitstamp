import * as D from "./digital-filter";

test("filter", () => {
  const x = [1, 2, 3, 4, 5, 6];
  const b = [1 / 2, 1 / 2];
  const a: number[] = [];
  const r = D.filter({ b, a }, x);

  const e: number[] = [0.5, 1.5, 2.5, 3.5, 4.5, 5.5];

  expect(r).toEqual(e);
});

test("EMA", () => {
  const { a, b } = D.EWMA(0.9);
  const x = [1, 2, 3, 4, 5, 6];

  const r = D.filter({ b, a }, x);

  const e: number[] = [0.5, 1.5, 2.5, 3.5, 4.5, 5.5];

  expect(r).toEqual(e);
});

const x = [
  22.27,
  22.19,
  22.08,
  22.17,
  22.18,
  22.13,
  22.23,
  22.43,
  22.24,
  22.29,
  22.15,
  22.39,
  22.38,
  22.61,
  23.36,
  24.05,
  23.75,
  23.83,
  23.95,
  23.63,
  23.82,
  23.87,
  23.65,
  23.19,
  23.1,
  23.33,
  22.68,
  23.1,
  22.4,
  22.17,
];

test("sma", () => {
  const { a, b } = D.SMA(10);

  const r = D.filter({ b, a }, x);

  const e: number[] = [
    2.227,
    4.446,
    6.654,
    8.871,
    11.089000000000002,
    13.302,
    15.525000000000002,
    17.768,
    19.992,
    22.221000000000004,
    22.209,
    22.229,
    22.259,
    22.303000000000004,
    22.421,
    22.613,
    22.764999999999997,
    22.905,
    23.076,
    23.21,
    23.377,
    23.525,
    23.651999999999997,
    23.709999999999997,
    23.684,
    23.612,
    23.505,
    23.432000000000002,
    23.277,
    23.131000000000004,
  ];

  const e2 = [
    22.22,
    22.21,
    22.23,
    22.26,
    22.31,
    22.42,
    22.61,
    22.77,
    22.91,
    23.08,
    23.21,
    23.38,
    23.53,
    23.65,
    23.71,
    23.69,
    23.61,
    23.51,
    23.43,
    23.28,
    23.13,
  ];

  expect(r).toEqual(e);

  r.splice(9).map((x, i) => {
    expect(x).toBeCloseTo(e2[i], 1);
  });
});

test("ewma day", () => {
  const { a, b } = D.EWMAday(10);

  const r = D.filter({ b, a }, x);

  const e2 = [
    22.22,
    22.21,
    22.23,
    22.26,
    22.31,
    22.42,
    22.61,
    22.77,
    22.91,
    23.08,
    23.21,
    23.38,
    23.53,
    23.65,
    23.71,
    23.69,
    23.61,
    23.51,
    23.43,
    23.28,
    23.13,
  ];

  r.splice(9).map((x, i) => {
    expect(x).toBeCloseTo(e2[i], 1);
  });
});
